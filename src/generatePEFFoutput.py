import pandas as pd
import gzip
from Bio import SeqIO
import re
import datetime
import sqlite3
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
import os

def sqlite_to_dict(sqlite_file):
    # Connect to the SQLite database
    conn = sqlite3.connect(sqlite_file)
    cursor = conn.cursor()

    # Query to retrieve protein descriptions and sequences
    query = "SELECT protein_id_fasta, protein_description, AA_seq FROM protein_description"
    cursor.execute(query)

    # Create an empty dictionary to store the sequences
    protein_dict = {}

    # Iterate through the result and create SeqRecord objects
    for protein_id_fasta, protein_description, AA_seq in cursor.fetchall():
        # Create a SeqRecord object for each protein
        seq_record = SeqRecord(Seq(AA_seq), id=protein_id_fasta, description=protein_description)
        # Add to dictionary with protein_description as the key
        protein_dict[protein_id_fasta] = seq_record

    # Close the connection
    conn.close()

    return protein_dict

def openFile(filename):
    '''open text or gzipped text file
    '''
    if filename.endswith('.gz'):
        return gzip.open(filename,'rt')
    return open(filename)

# file_protein = '/gpfs/gpfs/project1/jx76-001/xc/20200812perGeno/20201216Test/gencode.v37.pc_translations.fa.gz'
# file_mutation = '/gpfs/gpfs/project1/jx76-001/xc/20200812perGeno/20201216Test/GENCODE.pergeno.aa_mutations.csv'
# file_protein = '/gpfs/gpfs/project1/jx76-001/xc/20200812perGeno/20201216Test/Homo_sapiens.GRCh38.pep.all.fa.gz'
# file_mutation = '/gpfs/gpfs/project1/jx76-001/xc/20200812perGeno/20201216Test/Ensembl.pergeno.aa_mutations.csv'
# file_protein = '/gpfs/gpfs/project1/jx76-001/xc/20200812perGeno/20201216Test/GCF_000001405.39_GRCh38.p13_protein.faa.gz'
# file_mutation = '/gpfs/gpfs/project1/jx76-001/xc/20200812perGeno/20201216Test/RefSeq.pergeno.aa_mutations.csv'
# file_out = '/gpfs/gpfs/project1/jx76-001/xc/20200812perGeno/20201216Test/GENCODE.pergeno.protein_PEFF.fa'

def get_current_time():
    a = datetime.datetime.now()
    return '{}-{}-{}-{}-{}-{}'.format(a.year, a.month, a.day, a.hour, a.minute, a.second)

PEFFheader = '''# PEFF 1.0
# //
# DbName=PrecisionProDB
# Prefix={Prefix}
# DbSource={DbSource}
# DbVersion={DbVersion}
# SequenceType=AA
# NumberOfEntries={NumberOfEntries}
# GeneralComment=https://github.com/ATPs/PrecisionProDB
# //
'''

def generatePEFF(seq, mutations='', Prefix="PrecisionProDB"):
    '''return a string in PEFF format by adding mutations to the fasta header
    seq is a SeqIO object, the header like looks like
        ENSP00000320232.3|ENST00000322527.4|ENSG00000175820.4|OTTHUMG00000187287.2|OTTHUMT00000474707.2|CCDC168-201|CCDC168|7081
        only seq.id will be kept.
    mutations is a string of mutations like "P773L(chr13-102748379-G-A);A1822P(chr13-102745233-C-G);E2111Q(chr13-102744366-C-G)"
                 or a list like ['P773L(chr13-102748379-G-A)', 'A1822P(chr13-102745233-C-G)', 'E2111Q(chr13-102744366-C-G)']
    the PEFF header will be like:
    >PrecisionProDB:ENSP00000320232.3|ENST00000322527.4|ENSG00000175820.4|OTTHUMG00000187287.2|OTTHUMT00000474707.2|CCDC168-201|CCDC168|7081 \VariantSimple=(773|L|chr13-102748379-G-A)(1822|P|chr13-102745233-C-G)(2111|Q|chr13-102744366-C-G)
    '''
    if isinstance(mutations, str):
        if mutations == '':
            mutations = []
        else:
            mutations = mutations.split(';')
    if not isinstance(mutations, list):
        print(mutations, 'not in the right format! It must be a string or list')
        return ''
    
    seq_id = seq.id
    seq_description = ''
    
    # prepare VariantSimple
    VariantSimple = []
    for mutation in mutations:
        try:
            AA_mut, nt_mut = mutation.split('(')
            # AA_ref = AA_mut[0]
            AA_loc = AA_mut[1:-1]
            AA_alt = AA_mut[-1]
            nt_mut = nt_mut[:-1]
            VariantSimple.append('({}|{}|{})'.format(AA_loc, AA_alt, nt_mut))
        except:
            print(mutation, seq_id, 'annotation incomplete')
    VariantSimple = ''.join(VariantSimple)

    header = '{}:{}'.format(Prefix, seq_id)
    if seq_description != '':
        header = header + ' \\description=' + seq_description
    if VariantSimple != '':
        header = header + ' \\VariantSimple=' + VariantSimple
    
    # add "\Length"
    header = header + ' \\Length=' + str(len(seq.seq))
    
    return '>{}\n{}\n'.format(header, str(seq.seq))


def generatePEFFoutput(file_protein, file_mutation, file_out, TEST=False, file_sqlite=None):
    '''generate PEFF output file based on amino acid substitutions annotated by PresionProDB, save a PEFF file
    file_protein: orginal input protein sequences for PrecisonProDB
    file_mutation: mutation annotation file generated by PrecisonProDB
    '''
    # read in the mutation annotation
    df_mutation = pd.read_csv(file_mutation, sep='\t', low_memory=False)
    # add column "protein_id_ori" to include original protein IDs in input fasta file
    df_mutation['protein_id_ori'] = df_mutation['protein_id_fasta'].apply(lambda x:x.split('__')[0])
    # only keep variant_AA
    df_mutation = df_mutation[df_mutation['variant_AA'].notnull()]

    # get proteins with mutations
    proteins_mutated = {k:v for k,v in df_mutation.groupby('protein_id_ori')}

    # read in protein sequences to dict
    if file_protein and os.path.exists(file_protein):
        dc_pr = SeqIO.to_dict(SeqIO.parse(openFile(file_protein), 'fasta'))
    else:
        if file_sqlite and os.path.exists(file_sqlite):
            dc_pr = sqlite_to_dict(file_sqlite)
        else:
            print('no protein file or sqlite file provided')
            return None


    # prepare PEFF header
    PEFFheader_use = PEFFheader.format(Prefix='PrecisionProDB', DbSource=file_protein, DbVersion=get_current_time(), NumberOfEntries=len(dc_pr))

    # check if all mutation annotations location in the protein sequences is right. For proteins begin with 'X'
    if TEST:
        ls_abnormal = []
        for protein in proteins_mutated:
            tdf = proteins_mutated[protein]
            AA_muts = ';'.join(tdf['variant_AA']).split(';')
            for AA_mut in AA_muts:
                AA_mut = AA_mut.split('(')[0]
                AA_ref = AA_mut[0]
                AA_alt = AA_mut[-1]
                AA_loc = int(AA_mut[1:-1])
                if dc_pr[protein].seq[AA_loc-1] != AA_ref:
                    #print(protein)
                    ls_abnormal.append(protein)
                    break
        
        print('number of proteins that the AA annotation seems wrong:', len(ls_abnormal))
        
        ls_abnormal_notX = []
        for protein in ls_abnormal:
            if dc_pr[protein].seq[0] != 'X':
                ls_abnormal_notX.append(protein)
        if len(ls_abnormal) != 0:
            print('of these, proteins do not starts with X are:', ';'.join(ls_abnormal_notX))


    with open(file_out,'w') as f:
        f.write(PEFFheader_use)
        for protein, seq in dc_pr.items():
            if protein not in proteins_mutated:
                mutations = ''
            else:
                tdf = proteins_mutated[protein]
                mutations = ';'.join(tdf['variant_AA'])
            seq_PEFF = generatePEFF(seq, mutations=mutations, Prefix="PrecisionProDB")
            f.write(seq_PEFF)

def generateUniprotPEFFout(file_PEFF, files_uniprot_ref, file_uniprot_changed, file_uniprot_out):
    '''save PEFF results for UniProt runs
    '''
    # read in UniProt reference sequences to a dict
    dc_uniprot = {}
    for f in files_uniprot_ref.split(','):
        for s in SeqIO.parse(openFile(f),'fasta'):
            dc_uniprot[s.id] = s
    
    # read PEFF to a dict
    dc_PEFF = {}
    for s in SeqIO.parse(openFile(file_PEFF), 'fasta'):
        dc_PEFF[s.id.split(':')[1]] = s

    # read file_uniprot_changed to a dataframe
    df_changed = pd.read_csv(file_uniprot_changed, sep='\t')
    dc_ref2uni = dict(zip(df_changed['ref_id'], df_changed['uniprot_id']))
    uniprot_ids = set(dc_ref2uni.values())
    dc_uni2ref = dict(zip(df_changed['uniprot_id'], df_changed['ref_id']))

    # prepare PEFF header
    PEFFheader_use = PEFFheader.format(Prefix='PrecisionProDB', DbSource=files_uniprot_ref, DbVersion=get_current_time(), NumberOfEntries=len(dc_uniprot))

    with open(file_uniprot_out, 'w') as f:
        f.write(PEFFheader_use)
        for k, v in dc_uniprot.items():
            if k not in uniprot_ids:
                f.write(generatePEFF(v))
            else:
                ref_id = dc_uni2ref[k]
                seq = dc_PEFF[ref_id]
                seq_id, seq_annotation = seq.description.split(' ', maxsplit=1)
                seq_id = seq_id.split(':')[0] + ':' + k
                header = seq_id + ' ' + seq_annotation
                f.write('>{}\n{}\n'.format(header, str(seq.seq)))
    
    return None


description = '''Generate PEFF output file based on amino acid substitutions annotated by PresionProDB and save a PEFF file
'''
if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('-p', '--protein', help='protein sequences in fasta format. It can be a gzip file.', required=True)
    parser.add_argument('-o', '--outfile', help='file to store the output PEFF file', required=True)
    parser.add_argument('-m', '--mutation', help='mutation annotation file generated by PrecisonProDB', required=True)
    parser.add_argument('-T', '--TEST', help='whether to test the variant annotation is valid. Default: False', action='store_true')
    parser.add_argument('-u', '--uniprots', help='uniprot sequences in fasta format. It can be a gzip file. If more than one files, join with ",". Default: None', default=None)
    parser.add_argument('-c', '--changed', help='uniprot changed. A table generated by PrecisonProDB, including the relationship of uniprot_id and ensembl_id. It can be a gzip file.  Default: None', default=None)
    parser.add_argument('-O', '--outfile2', help='file to store the output PEFF file based on uniprot sequences.  Default: None', default=None)
    
    
    f = parser.parse_args()
    TEST = f.TEST
    generatePEFFoutput(file_protein = f.protein, file_mutation = f.mutation, file_out = f.outfile, TEST=TEST)

    if (f.uniprots is not None) and (f.changed is not None) and (f.outfile2 is not None):
        generateUniprotPEFFout(file_PEFF = f.outfile, files_uniprot_ref = f.uniprots, file_uniprot_changed = f.changed, file_uniprot_out = f.outfile2)